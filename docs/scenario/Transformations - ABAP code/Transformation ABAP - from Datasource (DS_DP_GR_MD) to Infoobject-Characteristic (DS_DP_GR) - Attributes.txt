***********************************************************************
*      Master Template Transformation
***********************************************************************
*      This is a generated program. Do not change it manually!
***********************************************************************
* Program class      RSTRAN_MASTER_TMPL
* Object reference   0OUY6JZNKDGX433OJH1LGAOKD
***********************************************************************
* Template           RSTRAN_MASTER_TMPL
*  - last changed by SAP
*  - last changed at 26.05.2022 15:36:20
* Generation
*  - User name       ASQ28945
*  - Time stamp      30.05.2025 09:09:34 UTC (30.05.2025 11:09:34 CET)
*  - Release         750
***********************************************************************
*&---------------------------------------------------------------------*
*&  Include           RSTRAN_MASTER_TMPL
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&  Template  RSTRAN_MASTER_TMPL  for transformation runtime           *
*&---------------------------------------------------------------------*



************************************************************************
*
*   Generated Runtime for Transformations
*
*   Template......: RSTRAN_MASTER_TMPL
*   TranID........: 0TA1PJQIQHQAV3EYN9WW0HIS8DXKNSUU   Version: 0
*   Source........: RSDS DS_DP_GR_MD                   XTK_FF
*   Target........: IOBJ MD_DP_GR ATTR
*
*   Author........: ASQ28945
*   Date..........: 30.05.2025 11:09:33
*
*   Do not change this source !
*
************************************************************************
program RSTRAN_MASTER_TMPL.


*---------------------------------------------------------------------*
*       CLASS lcl_transform DEFINITION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
class lcl_transform definition.

  public  section.

    type-pools: rstr.

    TYPES:
      BEGIN OF _ty_s_SC_1,
*      Field: DEPTKEY DeptKey.
        DEPTKEY           TYPE N LENGTH 2,
*      Field: DEPTGROUPPARENTK DeptGroupParentKey.
        DEPTGROUPPARENTK           TYPE N LENGTH 2,
*      Field: RECORD Data record number.
        RECORD           TYPE RSARECORD,
      END   OF _ty_s_SC_1.
    TYPES:
      _ty_t_SC_1        TYPE STANDARD TABLE OF _ty_s_SC_1
                        WITH NON-UNIQUE DEFAULT KEY.
    TYPES:
      BEGIN OF _ty_s_TG_1,
*      InfoObject: MD_DP_GR Department Group.
        /BIC/MD_DP_GR           TYPE /BIC/OIMD_DP_GR,
*      InfoObject: MD_DGR_P Department Group Parent.
        /BIC/MD_DGR_P           TYPE /BIC/OIMD_DGR_P,
*      InfoObject: 0RECORD Data record number.
        RECORD           TYPE RSARECORD,
      END   OF _ty_s_TG_1.
    TYPES:
      _ty_t_TG_1        TYPE STANDARD TABLE OF _ty_s_TG_1
                        WITH NON-UNIQUE DEFAULT KEY.
    Data:
      p_check_master_data_exist type RSODSOCHECKONLY read-only,
      p_r_request               type ref to if_rsbk_request_admintab_view read-only.

    methods:
    execute
    importing
      i_master_data_exist type RSODSOCHECKONLY
      i_r_inbound         type ref to cl_rsbk_data
      i_r_log             type ref to cl_rsbm_log_cursor_step
      i_r_request         type ref to if_rsbk_request_admintab_view OPTIONAL
      i_r_trfn_cmd        type ref to CL_RSBK_CMD_T OPTIONAL
    exporting
      e_r_outbound        type ref to cl_rsbk_data
    RAISING
      cx_rs_step_failed.


  private section.

    type-pools: rsd, rrsv, rstr.

*   Flag structure for dynamic rule suppression
    types:
  begin of _r_s_supp,
      _1                    type rs_bool,
      _2                    type rs_bool,
  end   of _r_s_supp.

    methods:
    get_fields_populated0001
      exporting
        e_t_fieldnm type rsar_t_fieldnames.


    TYPES:
      BEGIN OF _ty_G_1,
*      InfoObject: MD_DGR_P Department Group Parent.
        /BIC/MD_DGR_P           TYPE /BIC/OIMD_DGR_P,
*      InfoObject: MD_DP_GR Department Group.
        /BIC/MD_DP_GR           TYPE /BIC/OIMD_DP_GR,
      END   OF _ty_G_1.

endclass.                    "endclass

*---------------------------------------------------------------------*
*       CLASS lcl_transform IMPLEMENTATION
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
class lcl_transform implementation.

  method execute.
*=== Segments ===
    field-symbols:
      <_yt_SC_1>            type table,
      <_yt_SC_1_ty>          type _ty_t_SC_1,
      <_ys_SC_1>            type _ty_s_SC_1.
    field-symbols:
      <_yt_TG_1>            type _ty_t_TG_1,
      <_ys_TG_1>            type _ty_s_TG_1.

    field-symbols: <_ys_rimage> type _ty_s_TG_1.

    data:
       lr_CX_abort               TYPE REF TO CX_rsrout_abort,
       lr_cx_sy_conversion_error type ref to cx_sy_conversion_error,
       lr_cx_sy_arithmetic_error type ref to cx_sy_arithmetic_error,
       lr_cx_root                type ref to cx_root.
    data: lr_cx_rsbk_errorcount type ref to cx_rsbk_errorcount.
    data: l_rx_rsfo_error_in_function type ref to cx_rsfo_error_in_function,
          l_s_balmsg type bal_s_msg.
    data:
       lr_msg_coll               type ref to cl_rso_msg,
       _skip                     TYPE rs_bool,
       _skip_seg_all             TYPE rs_bool,
       _ls_msg                   type rsmonitor,
       _ls_msg_s                 type rstmonitor,
       _ls_msg_rec               type rstr_ty_s_monitor_rec,
       _lt_msg                   type rstr_ty_t_monitor,
       _lt_msg_s                 type rstr_ty_t_monitors,
       _lt_msg_rec               type rstr_ty_t_monitor_rec,
       _curr_rule                type cl_rstran_runtime_exe=>ty_s_rule_context,
       _ls_supp                  type _r_s_supp.
    data:
       l_fieldname               type string.

    field-symbols:
       <l_record_no>             type any,
       <l_record_all>            type any.

    data: l_segid                type rsbk_segid.

    data: l_dummy                type c.

    data:
      _r_SC_1               type ref to cl_rsbk_data_segment,
      _rdt_SC_1             type ref to data.
    data:
      _r_TG_1               type ref to cl_rsbk_data_segment,
      _rds_TG_1             type ref to data,
      _rdt_TG_1             type ref to data,
      _rdt_TG_1_dp          type ref to data.
*=== Step_type specific ===
    data:
     l_recno_SC_1 type sy-tabix.

    data:
     l_recno_TG_1 type sy-tabix.
*=== Group ===
    data:
    _G_1         type _ty_G_1,
    _G_1_subrc   type sysubrc,
    _G_1_tabix   type sytabix,
    _G_1_subrc_2   type sysubrc,
    _G_1_tabix_2   type sytabix,
    _G_1_subrc_3   type sysubrc,
    _G_1_tabix_3   type sytabix.


*=== Step_type specific ===
    data:
     l_requid   TYPE cl_rsbk_request=>t_requid,
     l_request  TYPE rsrequest.
    data:
     ls_cross         type RSBM_S_CROSSTAB.





* ==== 0. initialization
   CREATE object lr_msg_coll.
* ==== 1. unpack segments
    _r_SC_1              = i_r_inbound->get_segment( 0001 ).
    _rdt_SC_1            = _r_SC_1->get_data( i_with_recno = rs_c_true ).
    assign _rdt_SC_1->*            to <_yt_SC_1>.
    l_fieldname = 'RECORD_ALL'.
    assign (l_fieldname) to <l_record_all>.
    if sy-subrc = 0.
      describe table <_yt_SC_1> lines <l_record_all>.
    endif.


    data: l_t_fieldnm type rsar_t_fieldnames.

    _r_TG_1              = e_r_outbound->get_segment( 0001 ).
    _rdt_TG_1_dp         = _r_TG_1->get_empty_table( ).

*   get transformation target list and set in segment
    call method get_fields_populated0001
      importing
        e_t_fieldnm = l_t_fieldnm.
    _r_TG_1->set_t_fields_populated( l_t_fieldnm ).

    _rds_TG_1            = _r_TG_1->get_workarea( ).
    assign _rds_TG_1->*            to <_ys_TG_1>.
    create data _rdt_TG_1 type _ty_t_TG_1.
    assign _rdt_TG_1->*            to <_yt_TG_1>.

    _curr_rule-tranid  = '0TA1PJQIQHQAV3EYN9WW0HIS8DXKNSUU'.
    _curr_rule-progid  = '0OUY6JZNKDGX433OJH1LGAOKD'.
    _curr_rule-version = '0'.

    call method cl_rstran_runtime_exe=>get_suppressed_rules
      exporting
        i_tranid             = _curr_rule-tranid
        i_r_data             = e_r_outbound
        i_r_data_in          = i_r_inbound
      importing
        e_s_suppressed_rules = _ls_supp.

*   set attributs
    p_check_master_data_exist = i_master_data_exist.
    p_r_request               = i_r_request.
    l_segid                   = '0001'.

    l_requid = i_r_inbound->n_requid.
    if l_requid is not initial.
      TRY.
          l_request = cl_rsbk_request=>create_from_db(
             i_requid = l_requid )->get_requid30( ).
        CATCH cx_root INTO DATA(l_r_x).
          MESSAGE x299(rsbk).
      ENDTRY.
    endif.


* ==== Debugging ====
* Breakpoint after start routine
  if i_r_trfn_cmd is bound.
    READ TABLE i_r_trfn_cmd->n_th_bp
         TRANSPORTING NO FIELDS
         WITH TABLE KEY bpid    = 3
                        datapid = i_r_inbound->n_datapakid.
    IF sy-subrc = 0.

* --- Data ---
*     See datapackage below

* --- Debugging ---
      BREAK-POINT.                                           "#EC NOBREAK

    ENDIF.
  endif.



* ==== 2. process data package
    i_r_log->add_substep( 'RULES' ).
    LOOP AT <_yt_SC_1> assigning <_ys_SC_1>.

      CLEAR:
        _G_1,
        _lt_msg_rec,
        _lt_msg.
     _curr_rule-record = l_recno_SC_1 = <_ys_SC_1>-record.
     if not <l_record_no> is assigned.
       if <_ys_SC_1>-record = 1.
         l_fieldname = 'RECORD_NO'.
         assign (l_fieldname) to <l_record_no>.
         if sy-subrc = 0.
           <l_record_no> = <_ys_SC_1>-record.
         endif.
       endif.
     else.
       <l_record_no> = <_ys_SC_1>-record.
     endif.
      TRY.

* ======  RULES
*<<<    Rule ID: '1'.
          IF _ls_supp-_1 EQ rs_c_false.
            _curr_rule-ruleid = '1'.
*       Step ID: '1', Type: 'DIRECT'.
            _curr_rule-stepid = '1'.
    _G_1-/BIC/MD_DP_GR = <_ys_SC_1>-DEPTKEY.
          ENDIF.  "suppressed RULE
*>>>
*<<<    Rule ID: '2'.
          IF _ls_supp-_2 EQ rs_c_false.
            _curr_rule-ruleid = '2'.
*       Step ID: '1', Type: 'DIRECT'.
            _curr_rule-stepid = '1'.
    _G_1-/BIC/MD_DGR_P = <_ys_SC_1>-DEPTGROUPPARENTK.
          ENDIF.  "suppressed RULE
*>>>

        IF _lt_msg_rec is not initial.
          CALL METHOD cl_rstran_runtime_exe=>message_proxy
            EXPORTING
              i_r_log                   = i_r_log
              i_rule_context            = _curr_rule
              I_SEG_ID                  = `1`
              I_S_DATA                  = <_ys_SC_1>
            CHANGING
              c_t_msg                   = _lt_msg_rec.
        ENDIF.

        CATCH cx_rsrout_skip_record INTO lr_cx_root.
          _skip_seg_all = rs_c_true.
          IF _lt_msg[] IS NOT INITIAL.
            _ls_msg_rec-ruleid   = _curr_rule-ruleid.
            _ls_msg_rec-stepid   = _curr_rule-stepid.
            _ls_msg_rec-_s-recno = _curr_rule-record.
            LOOP at _lt_msg INTO _ls_msg.
              MOVE-CORRESPONDING _ls_msg to _ls_msg_rec-_s.
              APPEND _ls_msg_rec to _Lt_msg_rec.
            ENDLOOP.
          ENDIF.
          IF _lt_msg_rec is not initial.
            CALL METHOD cl_rstran_runtime_exe=>message_proxy
              EXPORTING
                i_r_log                   = i_r_log
                i_cx_root                 = lr_cx_root
                i_rule_context            = _curr_rule
                I_SEG_ID                  = `1`
                I_S_DATA                  = <_ys_SC_1>
             CHANGING
                c_t_msg                   = _lt_msg_rec.
          ENDIF.

        CATCH cx_rsfo_skip_record INTO lr_cx_root.
          _skip_seg_all = rs_c_true.

        CATCH cx_rsfo_skip_record_as_error INTO lr_cx_root.
          _skip_seg_all = rs_c_true.
          CALL METHOD cl_rstran_runtime_exe=>message_proxy
            EXPORTING
              i_r_log                   = i_r_log
              i_cx_root                 = lr_cx_root
              i_rule_context            = _curr_rule
              I_SEG_ID                  = `1`
              I_S_DATA                  = <_ys_SC_1>
            CHANGING
              c_t_msg                   = _lt_msg_rec.

        CATCH cx_rsbk_errorcount into lr_cx_rsbk_errorcount.
*         errorcount can't be determined
          _skip_seg_all = rs_c_true.
          CALL FUNCTION 'RS_EXCEPTION_TO_SYMSG'
            EXPORTING
              i_r_exception       = lr_cx_rsbk_errorcount
*             I_DEEPEST           =
                    .
          move-corresponding syst to _ls_msg_rec-_s.
          _ls_msg_rec-_s-skipped = rs_c_true.
          APPEND _ls_msg_rec to _Lt_msg_rec.
          CALL METHOD cl_rstran_runtime_exe=>message_proxy
            EXPORTING
              i_r_log                   = i_r_log
              i_rule_context            = _curr_rule
              I_SEG_ID                  = `1`
              I_S_DATA                  = <_ys_SC_1>
            CHANGING
              c_t_msg                   = _lt_msg_rec.

        CATCH cx_foev_error_in_function INTO lr_cx_root.            "HW 980549
          _skip_seg_all = rs_c_true.
          clear _ls_msg_rec.
          _ls_msg_rec-ruleid   = _curr_rule-ruleid.
          _ls_msg_rec-stepid   = _curr_rule-stepid.
          _ls_msg_rec-_s-recno = _curr_rule-record.

          try.
            l_rx_rsfo_error_in_function ?= lr_cx_root.
            call method l_rx_rsfo_error_in_function->get_message
              importing
                e_s_msg = l_s_balmsg.
            move-corresponding l_s_balmsg to _ls_msg_rec-_s.
            APPEND _ls_msg_rec to _Lt_msg_rec.
           catch  cx_sy_move_cast_error.
          endtry.

          message e535(rsar)
            with _curr_rule-ruleid _curr_rule-record
            into _ls_msg_rec-_s-msgty.
          move-corresponding syst to _ls_msg_rec-_s.
          _ls_msg_rec-_s-skipped = rs_c_true.
          APPEND _ls_msg_rec to _Lt_msg_rec.
          CALL METHOD cl_rstran_runtime_exe=>message_proxy
            EXPORTING
              i_r_log                   = i_r_log
              i_rule_context            = _curr_rule
              I_SEG_ID                  = `1`
              I_S_DATA                  = <_ys_SC_1>
            CHANGING
              c_t_msg                   = _lt_msg_rec.

        CATCH cx_sy_arithmetic_error into lr_cx_sy_arithmetic_error.
           _skip_seg_all = rs_c_true.
          CALL METHOD cl_rstran_runtime_exe=>message_proxy
            EXPORTING
              i_r_log                  = i_r_log
              i_cx_sy_arithmetic_error = lr_cx_sy_arithmetic_error
              i_rule_context           = _curr_rule
              I_SEG_ID                 = `1`
              I_S_DATA                 = <_ys_SC_1>.

        CATCH cx_sy_conversion_error  INTO lr_cx_sy_conversion_error.
          _skip_seg_all = rs_c_true.
          CALL METHOD cl_rstran_runtime_exe=>message_proxy
            EXPORTING
              i_r_log                  = i_r_log
              i_cx_sy_conversion_error = lr_cx_sy_conversion_error
              i_rule_context           = _curr_rule
              I_SEG_ID                 = `1`
              I_S_DATA                 = <_ys_SC_1>.

        CATCH cx_root INTO lr_cx_root.
          _skip_seg_all = rs_c_true.
*--       all other cases handled by message proxy
          IF _lt_msg[] IS NOT INITIAL.
            _ls_msg_rec-ruleid   = _curr_rule-ruleid.
            _ls_msg_rec-stepid   = _curr_rule-stepid.
            _ls_msg_rec-_s-recno = _curr_rule-record.
            LOOP at _lt_msg INTO _ls_msg.
              MOVE-CORRESPONDING _ls_msg to _ls_msg_rec-_s.
              APPEND _ls_msg_rec to _Lt_msg_rec.
            ENDLOOP.
          ENDIF.

          CALL METHOD cl_rstran_runtime_exe=>message_proxy
            EXPORTING
              i_r_log                  = i_r_log
              i_cx_root                = lr_cx_root
              i_rule_context           = _curr_rule
              I_SEG_ID                 = `1`
              I_S_DATA                 = <_ys_SC_1>
            CHANGING
              c_t_msg                   = _lt_msg_rec.

      ENDTRY.       "RECORD

* =====  PUT groups to target
      IF _skip_seg_all IS INITIAL.

      ASSIGN _rds_TG_1->*          to <_ys_TG_1>.
      CLEAR <_ys_TG_1>.
      MOVE-CORRESPONDING _G_1 TO <_ys_TG_1>.
      l_recno_TG_1          = l_recno_TG_1 + 1.
      ls_cross-insegid      = 1.
      ls_cross-inrecord     = l_recno_SC_1.
      ls_cross-outsegid     = 1.
      ls_cross-outrecord    = l_recno_TG_1.

      CALL METHOD i_r_log->add_cross_tab
        EXPORTING
          I_S_CROSSTAB = ls_cross.

**     Record# in target = sy-tabix - if sorting of table won't be changed
      <_ys_TG_1>-record     = l_recno_TG_1.

      APPEND <_ys_TG_1> TO <_yt_TG_1>.

*
      ENDIF.
      CLEAR _skip_seg_all.
    ENDLOOP.
* -------- insert table into outbound segment ----


* ==== Debugging ====
* Breakpoint before end routine
  if i_r_trfn_cmd is bound.
    READ TABLE i_r_trfn_cmd->n_th_bp
         TRANSPORTING NO FIELDS
         WITH TABLE KEY bpid    = 4
                        datapid = i_r_inbound->n_datapakid.
    IF sy-subrc = 0.

* --- Data ---
*     See datapackage above..

* --- Debugging ---
      BREAK-POINT.                                           "#EC NOBREAK

    ENDIF.
  endif.



IF l_requid NE 0.

        DATA: l_r_request_0001       TYPE REF TO cl_rsbk_request,
              l_errorhandling_0001   TYPE rsbkerrorhandling,
              l_skip_0001            TYPE rs_bool.
*-- get the request
        TRY.
            CALL METHOD cl_rsbk_request=>create_from_db
              EXPORTING
                i_requid    = l_requid
              RECEIVING
                r_r_request = l_r_request_0001.
          CATCH cx_rs_not_found .
        ENDTRY.
*-- get the error handling setting from the request
        TRY.
            CALL METHOD l_r_request_0001->get_errorhandling
              RECEIVING
                r_errorhandling = l_errorhandling_0001.
          CATCH cx_rs_access_error .
        ENDTRY.
*-- only in case of error handling on
        IF l_errorhandling_0001 NE rsbc_c_errorhandling-off.
          LOOP AT <_yt_TG_1> ASSIGNING <_ys_TG_1>.
            CALL METHOD i_r_log->verify_record
              EXPORTING
                i_segid         = 0001
                i_record        = <_ys_TG_1>-record
                i_use_crosstab  = rs_c_true               " As it is the Target format
              RECEIVING
                r_skip          = l_skip_0001
              EXCEPTIONS
                too_many_errors = 1
                not_in_crosstab = 2
                others          = 3.
              IF sy-subrc <> 0.
*-- too many errors/ not in crosstab abort
                 CALL FUNCTION 'RS_SYMESSAGE_TO_EXCEPTION'
                    EXPORTING
                      i_exception = 'CX_RS_MSG'
                    IMPORTING
                      e_r_exception = lr_cx_root.
                 CALL METHOD cl_rsbm_log_step=>raise_step_failed_callstack
                  EXPORTING
                      i_previous  =  lr_cx_root.
              ELSEIF not l_skip_0001 is initial.
                  DELETE <_yt_TG_1>.
              ENDIF.
            ENDLOOP.
       ENDIF.
ENDIF.

    _r_TG_1->insert_table( _rdt_TG_1 ).
  ENDMETHOD.                 "execute

  METHOD get_fields_populated0001.

    append '/BIC/MD_DP_GR' to e_t_fieldnm.
    append '/BIC/MD_DGR_P' to e_t_fieldnm.

  ENDMETHOD.



    endclass.                    "lcl_transform IMPLEMENTATION

*&--------------------------------------------------------------------*
*&      Form  get_runtime_ref
*&--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      -->C_R_EXE    text
*---------------------------------------------------------------------*
form get_runtime_ref
  changing c_r_exe  type ref to object.

*-- singelton instance
  statics s_r_exe type ref to lcl_transform.

  if s_r_exe is not bound.
    create object s_r_exe.
  endif.
  c_r_exe = s_r_exe.

endform.                    "get_runtime_ref

*.. The following subroutine is for internal (FuGr RSSG) use only! ..*


FORM _RSSG_PROGRAM_LOADCHECK
     CHANGING E_S_PDIR TYPE RSSGTPDIR
              E_FOUND  TYPE FLAG. "#EC CALLED
CONSTANTS:
BEGIN OF _RSSG_C_PCLA,
  PROGCLASS TYPE  RSSGTPCLA-PROGCLASS
    VALUE 'RSTRAN_MASTER_TMPL',
  CLIDEP TYPE  RSSGTPCLA-CLIDEP
    VALUE ' ',
  GENFLAG TYPE  RSSGTPCLA-GENFLAG
    VALUE 'X',
  SUBC TYPE  RSSGTPCLA-SUBC
    VALUE '1',
  TEMPLATE TYPE  RSSGTPCLA-TEMPLATE
    VALUE 'RSTRAN_MASTER_TMPL',
END   OF _RSSG_C_PCLA,

BEGIN OF _RSSG_C_PDIR,
  UNI_IDC25 TYPE  RSSGTPDIR-UNI_IDC25
    VALUE '0OUY6JZNKDGX433OJH1LGAOKD',
  CLIENT TYPE  RSSGTPDIR-CLIENT
    VALUE ' ',
  PROGCLASS TYPE  RSSGTPDIR-PROGCLASS
    VALUE 'RSTRAN_MASTER_TMPL',
  PROGNAME TYPE  RSSGTPDIR-PROGNAME
    VALUE 'GP0OUY6JZNKDGX433OJH1LGAOKD',
  CREUSER TYPE  RSSGTPDIR-CREUSER
    VALUE 'ASQ28945',
  CRETSTMP TYPE  RSSGTPDIR-CRETSTMP
    VALUE 20250530090934,
  GENUSER TYPE  RSSGTPDIR-GENUSER
    VALUE 'ASQ28945',
  GENTSTMP TYPE  RSSGTPDIR-GENTSTMP
    VALUE 20250530090934,
  GENRELEASE TYPE  RSSGTPDIR-GENRELEASE
    VALUE '750',
  GENSTATUS TYPE  RSSGTPDIR-GENSTATUS
    VALUE '00',
  TEMPLATE TYPE  RSSGTPDIR-TEMPLATE
    VALUE 'RSTRAN_MASTER_TMPL',
  UPDUSERTPL TYPE  RSSGTPDIR-UPDUSERTPL
    VALUE 'SAP',
  UPDDATETPL TYPE  RSSGTPDIR-UPDDATETPL
    VALUE '20220526',
  UPDTIMETPL TYPE  RSSGTPDIR-UPDTIMETPL
    VALUE '153620',
  SUBC TYPE  RSSGTPDIR-SUBC
    VALUE '1',
  WITH_SUBTEMPL TYPE  RSSGTPDIR-WITH_SUBTEMPL
    VALUE 'X',
END   OF _RSSG_C_PDIR.

  MOVE-CORRESPONDING _RSSG_C_PDIR TO E_S_PDIR.
  E_FOUND = 'X'.
ENDFORM.
